<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
                        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
                        
<mapper namespace="com.kosta.jupjup.dao.MateFindDAO">
	
	<sql id="criteria">
		<trim prefix="(" suffix=") AND " prefixOverrides="OR"> <!-- 앞에있는 OR없애줌 -->
			<foreach item='type' collection="typeArr">
				<trim prefix="OR">
					<choose>
						<when test="type == 'A'.toString()">
							activityname like '%'||#{keyword}||'%'
						</when>
						<when test="type == 'M'.toString()">
							meetingplace like '%'||#{keyword}||'%'
						</when>
					</choose>
				</trim>
			</foreach>
		</trim>
	</sql>
	
	
	
	<sql id="regular">
		<if test="meeting == 0">
			meetingtime > #{currenttime} and
		</if> 
	</sql>
	
	
	<select id="getlistWithPaging" resultType="com.kosta.jupjup.vo.MateVO" >
	  <![CDATA[
	  select 
		 no,activityname, writer, meetingtime, meetingplace,meetingdate, peoplenum,peoplemaxnum,
		 regdate,regular,image,to_char(meetingdate,'dy') dayofweek,content,likecnt,replycnt,report_count
	  from (
	    select
	    ]]>
	    	/*+INDEX_DESC(mate pk_mate ) */
 		 <![CDATA[
 		 rownum rn, no, activityname, writer, meetingtime, meetingplace,meetingdate, peoplenum,peoplemaxnum,
 		 regdate,regular,image,to_char(meetingdate,'dy') dayofweek,content,likecnt,replycnt,report_count
	      from ]]>
	      <choose>
			<when test="filter == 'soon'.toString()">
						(select * from mate order by meetingdate asc)	
			</when>
			<when test="filter == 'like'.toString()">
						(select * from mate order by likecnt desc)	
			</when>
			<when test="filter == 'newest'.toString()">
						(select * from mate order by regdate desc)	
			</when>		
			<otherwise>
				mate
			</otherwise>
		</choose>
	      <![CDATA[
	  where sysdate<timestamp and
 		]]>
	  <include refid="criteria"></include>
	  <choose>
	    <when test="meeting == '1'.toString()">
			regular=1 and
		</when>
		<when test="meeting == '0'.toString()">
			regular=0 and
		</when>
	  </choose> 
	  <![CDATA[    
	      rownum <= #{pageNum} * #{amount}
	     ]]> 
	      )  
	 <![CDATA[ 
	  where rn > (#{pageNum} -1) * #{amount}   
	 ]]>
  </select> 
  
  
  <select id="getTotalCount" resultType="int">
    <![CDATA[ 
	  select count(*) from mate where sysdate <timestamp and]]>  
	  	  
	    <include refid="criteria"></include> 
	    
	 	 no > 0  
	   
  </select>
  
  <select id="read" resultType="com.kosta.jupjup.vo.MateVO">
  <![CDATA[
		select no, activityname, writer, meetingplace,
		to_char(meetingdate,'dy') dayofweek,meetingdate, peoplenum,
		peoplemaxnum, startzone, endzone,
        meetingtime,
		starttime,
		endtime, content,regdate, updatedate,
		replycnt, image, regular, likecnt,user_id,report_count
		 from mate where no =
		#{no}
        
		]]>
	</select> 
	
	
	
	<select id="getBestlist" resultType="com.kosta.jupjup.vo.MateVO" >
	  <![CDATA[
	 SELECT no,activityname, writer, meetingtime, meetingplace,meetingdate, peoplenum,peoplemaxnum,
		 regdate,regular,image,to_char(meetingdate,'dy') dayofweek,content,likecnt,replycnt
		FROM (
			SELECT *
			FROM (
					SELECT * 
					FROM mate 
					WHERE REGULAR = 1 
					AND meetingdate >= TRUNC(sysdate,'d')
					)
			WHERE meetingdate <= TRUNC(sysdate,'d')+6
			ORDER BY LIKECNT DESC
			)
		WHERE ROWNUM <=3
	 ]]>
  </select> 
  
  <update id="update" >
  <![CDATA[
	 	update mate
	 	set activityname=#{activityname},
	 	meetingplace = #{meetingplace},
	 	meetingdate = #{meetingdate},
	 	meetingtime = #{meetingtime},
	 	peoplemaxnum = #{peoplemaxnum},
	 	startzone = #{startzone},
	 	endzone = #{endzone},
	 	starttime = #{starttime},
	 	endtime = #{endtime},
	 	content=#{content},
	 	updatedate=sysdate
	 	where no=#{no}
	 	 ]]>
	</update>
	
	<delete id="delete">
		delete mate where no = #{no}
	</delete>
	
	<select id="mateInUsers" resultType="com.kosta.jupjup.vo.UserVO">
	 	<![CDATA[
	 		select u.* from 
			users u, mate_join mj, mate m where
			u.id=mj.userid and mj.no=m.no and mj.jno=1 and m.no=#{no}
	 	]]>
	</select>
	
	<insert id="report">
		insert into report (report_no,report_type,report_content,mate_id,report_writer)
		values(seq_report.nextval,#{report_type},TRIM(both ',' from #{report_content}),#{mate_id},#{report_writer})
	</insert>
	
	<select id="reportChk" resultType="Integer">
		select count(*) from report where report_writer=#{id} and mate_id=#{no}
	</select>
	
	<update id="reportUpdate">
		update mate set report_count=report_count+1 where no=#{no}
	</update>
	
	<select id="repReportChk" resultType="Integer">
		select count(report_no) from report where report_writer=#{report_writer} and mate_reply_id=#{mate_reply_id}
	</select>
	
	<insert id="repReport">
	insert into report (report_no,report_type,report_writer,report_content,mate_reply_id)
	values(seq_report.nextval,#{report_type},#{report_writer},TRIM(both ',' from #{r_report_content}),#{mate_reply_id})
	</insert>
</mapper>		